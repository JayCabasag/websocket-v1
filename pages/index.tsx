
import Head from 'next/head'
import React, { useEffect, useRef, useState } from 'react'
import { io } from 'socket.io-client'
interface User {
  id: string
  name: string
}
interface Message {
  id: string | null
  message: string
}


export default function Home() {
  const [users, setUsers] = useState<User[]>([])
  const [messages, setMessages] = useState<Message[]>([])
  const messageInputRef = useRef<HTMLTextAreaElement>(null)
  const [error, setError] = useState('')
  const hasError = error !== ''

  useEffect(() => {
    const socket = io('https://web-socket-v1-server.vercel.app/')
    socket.on('users', data => {
      setUsers(data);
    })

    socket.on('messages', data => {
      setMessages(data)
    })

    return () => {
      socket.disconnect()
    }
  }, [])

  const handleSubmitMessage = (event: React.SyntheticEvent) => {
    event.preventDefault()

    const target = event.target as typeof event.target & {
      message: { value: string }
    }
    const message = target.message.value as string

    if (message === '') {
      return setError('Message cannot be empty.')
    }
    const socket = io('https://web-socket-v1-server.vercel.app/')
    socket.emit('send-group-message', {id: null, message: message})
    if (messageInputRef.current) {
      messageInputRef.current.value = ''
    }
    return setError('')
  }

  const handleClearMessages = () => {
    const socket = io('https://web-socket-v1-server.vercel.app/')
    socket.emit('clear-messages')
  }

  return (
    <>
      <Head>
        <title>Web Socket Chat app</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main style={{ display: 'flex', flexDirection: 'column' }}>
        <div style={{ display: 'flex', flexDirection: 'column' }}>
          {users.map((user: User, index: number) => {
            return <p key={index}>Online: {user.name}</p>
          })}
        </div>
        <div style={{ display: 'flex', flexDirection: 'column' }}>
          <div style={{ display: 'flex', flexDirection: 'row', width: '100%', justifyContent: 'space-between'}}>
            <h3>Mema na Omegle</h3>
            <button onClick={handleClearMessages}>Clear Messages</button>
          </div>
          {messages.map((message: Message, index: number) => {
            return <p key={index}>Message: {message.message}</p>
          })}
        </div>
        <form onSubmit={handleSubmitMessage} className='send-message-form'>
            <textarea ref={messageInputRef} name='message'/>
            {hasError && (<p style={{color: 'red'}}>{error}</p>)}
            <button type='submit'>Send Message</button>
        </form>
      </main>
    </>
  )
}
